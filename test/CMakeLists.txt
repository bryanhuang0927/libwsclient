CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
project(wsclient_test C)

if(POLICY CMP0015)
  cmake_policy(SET CMP0015 NEW)
endif()

if(POLICY CMP0037)
  cmake_policy(SET CMP0037 NEW)
endif()

if(POLICY CMP0042)
  cmake_policy(SET CMP0042 NEW)
endif()

macro(use_c99)
  if (CMAKE_VERSION VERSION_LESS "3.1")
    if (CMAKE_C_COMPILER_ID STREQUAL "GNU")
      set (CMAKE_C_FLAGS "-std=gnu99 ${CMAKE_C_FLAGS}")
    endif ()
  else ()
    set (CMAKE_C_STANDARD 99)
  endif ()
endmacro(use_c99)

use_c99()

# Check dependent definitions
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(C_FLAGS "-g -O0")
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${C_FLAGS}")
message(STATUS "CMAKE_C_FLAGS=${CMAKE_C_FLAGS}")
if(NOT DEFINED OPENSSL_ROOT_DIR)
  message(FATAL_ERROR "Please define [OPENSSL_ROOT_DIR]")
endif()
if(NOT DEFINED CHECK_INSTALL_DIR)
  set(CHECK_INSTALL_DIR /usr/local)
  message(AUTHOR_WARNING "[CHECK_INSTALL_DIR](https://libcheck.github.io/check/) is set to /usr/local as default.  Define it according your enviroument configuration if make failed.")
endif()
if(DEFINED MEMDBG_INSTALL_DIR)
  add_definitions(-D_MEMDBG_)
endif()

# link dependency
include_directories(${PROJECT_SOURCE_DIR}/..)
include_directories(${OPENSSL_ROOT_DIR}/include)
link_directories(${OPENSSL_ROOT_DIR}/lib)
include_directories(${CHECK_INSTALL_DIR}/include)
link_directories(${CHECK_INSTALL_DIR}/lib)
if(DEFINED MEMDBG_INSTALL_DIR)
  include_directories(${MEMDBG_INSTALL_DIR}/include)
  link_directories(${MEMDBG_INSTALL_DIR}/lib)
endif()

# make target
aux_source_directory(${PROJECT_SOURCE_DIR}/.. WSCLIENT_SRC_FILES)
aux_source_directory(${PROJECT_SOURCE_DIR} TEST_SRC_FILES)
add_executable(${PROJECT_NAME} ${WSCLIENT_SRC_FILES} ${TEST_SRC_FILES})
set(LIBS "check")
list(APPEND LIBS "crypto")
list(APPEND LIBS "ssl")
if(DEFINED MEMDBG_INSTALL_DIR)
  LIST(APPEND LIBS "memdbg")
endif()
target_link_libraries(${PROJECT_NAME} ${LIBS})
